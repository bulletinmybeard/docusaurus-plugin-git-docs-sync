import * as fs from 'fs';
import * as path from 'path';
import { PlaceholderStateManager } from './placeholder-state-manager';

export interface PlaceholderFile {
  originalPath: string;
  backupPath: string;
  error: string;
}

/**
 * Generates placeholder content for invalid MDX files
 */
export class PlaceholderGenerator {
  private placeholderFiles: PlaceholderFile[] = [];
  private tempDir: string;
  private stateManager: PlaceholderStateManager;
  
  constructor(siteDir: string) {
    this.tempDir = path.join(siteDir, '.docusaurus-temp');
    this.stateManager = PlaceholderStateManager.getInstance();
  }
  
  /**
   * Replace invalid MDX files with placeholder content
   */
  async createPlaceholders(invalidFiles: Array<{file: string, error: string}>): Promise<void> {
    // Ensure temp directory exists
    if (!fs.existsSync(this.tempDir)) {
      fs.mkdirSync(this.tempDir, { recursive: true });
    }
    
    for (const { file, error } of invalidFiles) {
      if (fs.existsSync(file)) {
        const fileName = path.basename(file);
        const backupPath = path.join(this.tempDir, `${fileName}.backup`);
        
        try {
          // Backup original file to temp directory
          const originalContent = fs.readFileSync(file, 'utf-8');
          fs.writeFileSync(backupPath, originalContent, 'utf-8');
          
          // Create placeholder content
          const placeholderContent = this.generatePlaceholder(fileName, error);
          
          // Write placeholder to original location
          fs.writeFileSync(file, placeholderContent, 'utf-8');
          
          this.placeholderFiles.push({ originalPath: file, backupPath, error });
          console.log(`[Git Sync] Created placeholder for invalid file: ${fileName}`);
        } catch (err) {
          console.error(`[Git Sync] Failed to create placeholder for ${file}:`, err);
        }
      }
    }
    
    // Update global state
    if (this.placeholderFiles.length > 0) {
      this.stateManager.setPlaceholdersActive(this.placeholderFiles.map(p => p.originalPath));
    }
  }
  
  /**
   * Restore all files from backups
   */
  async restoreOriginals(): Promise<void> {
    if (this.placeholderFiles.length === 0) {
      return;
    }
    
    console.log(`[Git Sync] Restoring ${this.placeholderFiles.length} original files...`);
    
    for (const { originalPath, backupPath } of this.placeholderFiles) {
      if (fs.existsSync(backupPath)) {
        try {
          const backupContent = fs.readFileSync(backupPath, 'utf-8');
          fs.writeFileSync(originalPath, backupContent, 'utf-8');
          fs.unlinkSync(backupPath);
          console.log(`[Git Sync] Restored original file: ${path.basename(originalPath)}`);
        } catch (err) {
          console.error(`[Git Sync] Failed to restore ${originalPath}:`, err);
        }
      }
    }
    
    // Clean up temp directory if empty
    try {
      const files = fs.readdirSync(this.tempDir);
      if (files.length === 0) {
        fs.rmdirSync(this.tempDir);
      }
    } catch (err) {
      // Ignore errors cleaning up temp directory
    }
    
    // Update global state
    this.stateManager.setPlaceholdersInactive(this.placeholderFiles.map(p => p.originalPath));
    
    this.placeholderFiles = [];
  }
  
  /**
   * Generate placeholder MDX content
   */
  private generatePlaceholder(fileName: string, error: string): string {
    // Add a unique marker that we can check for to prevent committing placeholders
    return `---
title: "MDX Compilation Error"
description: "This file contains MDX errors and cannot be displayed"
_isPlaceholder: true
_doNotCommit: "DOCUSAURUS_PLACEHOLDER_DO_NOT_COMMIT"
---

<!-- DOCUSAURUS_PLACEHOLDER_DO_NOT_COMMIT -->

# MDX Compilation Error

This file \`${fileName}\` contains MDX syntax errors and cannot be compiled.

## Error Details

\`\`\`
${error}
\`\`\`

## How to Fix

1. Fix the MDX syntax error described above
2. The original file will be restored automatically when the error is fixed
3. Common fixes:
   - Replace \`<br>\` with \`<br />\`
   - Replace \`<img src="...">\` with \`<img src="..." />\`
   - Remove invalid expressions like \`{20x20}\`
   - Ensure all referenced images exist

---

*This is a temporary placeholder generated by the Git Sync plugin to prevent build errors.*
`;
  }
  
  /**
   * Check if we have any placeholder files
   */
  hasPlaceholders(): boolean {
    return this.placeholderFiles.length > 0;
  }
}